import java.util.Collections;
// ตัวแปรสำหรับปุ่ม
PButton startButton, loadButton, exitButton;

// สถานะของหน้าจอปัจจุบัน
String screen = "menu"; // เริ่มต้นที่หน้าจอเมนู

// ตารางซูโดกุขนาด 9x9
int[][] grid = new int[9][9]; // เก็บตัวเลขในแต่ละช่อง
boolean[][] isValid = new boolean[9][9]; // เก็บสถานะความถูกต้องของแต่ละช่อง
int selectedRow = -1, selectedCol = -1; // ตำแหน่งช่องที่ถูกเลือก

void setup() {
  size(450, 450);  // ขนาดหน้าต่าง 450x450 พิกเซล
  background(255); // ตั้งค่าสีพื้นหลังเป็นสีขาว
  
  // สร้างปุ่ม Start, Load และ Exit โดยกำหนดสีเข้มขึ้น
  startButton = new PButton("Start", 150, 150, 150, 50, color(0, 150, 0));    // สีเขียวเข้ม
  loadButton = new PButton("Load", 150, 220, 150, 50, color(0, 0, 200));      // สีน้ำเงินเข้ม
  exitButton = new PButton("Exit", 150, 290, 150, 50, color(200, 0, 0));      // สีแดงเข้ม
  
  // เริ่มกรอกตัวเลขสุ่มในตาราง
  generateUniqueSudokuGrid(); // เรียกใช้ฟังก์ชันเพื่อสร้างกริดที่ไม่ซ้ำกัน
}

void draw() {
  // ตรวจสอบสถานะของหน้าจอ
  if (screen.equals("menu")) {
    // แสดงเมนู
    background(255); // ล้างหน้าจอด้วยสีขาว
    startButton.display();
    loadButton.display();
    exitButton.display();
  } else if (screen.equals("sudoku")) {
    // แสดงหน้าจอซูโดกุ
    background(255); // ล้างหน้าจอด้วยสีขาว
    drawSudokuGrid();
  }
}

void generateUniqueSudokuGrid() {
  fillNumbers(0, 0); // เริ่มต้นกรอกตัวเลขจากแถว 0 คอลัมน์ 0
  removeNumbers(); // ลบหมายเลขบางตัวเพื่อทำให้เป็นปริศนา
}

// ฟังก์ชันวาดตารางซูโดกุโดยใช้สี่เหลี่ยม
void drawSudokuGrid() {
  int gridSize = 9;      // ซูโดกุเป็นตารางขนาด 9x9
  float cellSize = width / gridSize;  // ขนาดของช่องแต่ละช่อง

  for (int i = 0; i < gridSize; i++) {
    for (int j = 0; j < gridSize; j++) {
      // แสดงสีของช่องที่ถูกเลือก
      if (i == selectedRow && j == selectedCol) {
        fill(255, 100, 100); // ช่องที่ถูกเลือกจะเป็นสีแดงอ่อน
      } else {
        fill(255); // ช่องปกติเป็นสีขาว
      }

      // วาดช่องสี่เหลี่ยมของตาราง
      noStroke(); // ปิดเส้นขอบเพื่อให้วาดช่องสี่เหลี่ยมก่อน
      rect(i * cellSize, j * cellSize, cellSize, cellSize);

      // วาดเส้นขอบของตารางแบบบาง
      stroke(0); // เส้นขอบสีดำ
      strokeWeight(1); // เส้นบางปกติ
      noFill();
      rect(i * cellSize, j * cellSize, cellSize, cellSize);
    }
  }

  // วาดเส้นขอบหนาของบล็อก 3x3
  stroke(0); // เส้นขอบสีดำ
  strokeWeight(3); // เส้นขอบหนา
  for (int i = 0; i <= gridSize; i++) {
    if (i % 3 == 0) {
      // วาดเส้นขอบหนาทุก 3 ช่อง
      line(i * cellSize, 0, i * cellSize, height); // เส้นแนวตั้ง
      line(0, i * cellSize, width, i * cellSize);  // เส้นแนวนอน
    }
  }

  // วาดตัวเลขในช่อง
  for (int i = 0; i < gridSize; i++) {
    for (int j = 0; j < gridSize; j++) {
      if (grid[i][j] > 0) {
        // ตรวจสอบว่าตัวเลขในช่องนั้นถูกต้องหรือไม่
        if (isValid[i][j]) {
          fill(0); // สีของตัวเลขที่ถูกต้องเป็นสีดำ
        } else {
          fill(255, 0, 0); // สีของตัวเลขที่ไม่ถูกต้องเป็นสีแดง
        }
        textAlign(CENTER, CENTER);
        textSize(24);
        text(grid[i][j], i * cellSize + cellSize / 2, j * cellSize + cellSize / 2);
      }
    }
  }
}

// ฟังก์ชันกรอกตัวเลขสุ่มในตาราง โดยไม่ให้เลขในแถว, คอลัมน์, และบล็อก 3x3 ซ้ำกัน
void fillGrid() {
  fillNumbers(0, 0); // เริ่มต้นกรอกตัวเลขจากแถว 0 คอลัมน์ 0
}

// ฟังก์ชันกรอกตัวเลขในตารางซูโดกุ
boolean fillNumbers(int row, int col) {
  if (row == 9) { // ถ้าเต็มตารางแล้ว
    return true; // เสร็จสมบูรณ์
  }

  // ถัดไปในคอลัมน์
  int nextRow = (col == 8) ? row + 1 : row;
  int nextCol = (col + 1) % 9;

  // สุ่มตัวเลขจาก 1 ถึง 9
  ArrayList<Integer> numbers = new ArrayList<Integer>();
  for (int num = 1; num <= 9; num++) {
    numbers.add(num);
  }
  Collections.shuffle(numbers); // สุ่มหมายเลข

  // ลองกรอกเลขในลำดับที่สุ่ม
  for (int num : numbers) {
    if (isValidMove(row, col, num)) {
      grid[row][col] = num; // กรอกตัวเลข
      isValid[row][col] = true; // ตั้งค่าสถานะเป็นถูกต้อง

      // เรียกใช้ฟังก์ชันนี้ซ้ำเพื่อกรอกเลขถัดไป
      if (fillNumbers(nextRow, nextCol)) {
        return true; // ถ้ากรอกเลขถัดไปสำเร็จ
      }

      // ถ้ากรอกเลขถัดไปไม่สำเร็จ ให้ลบเลขนี้ออกและลองเลขถัดไป
      grid[row][col] = 0; // ลบเลข
      isValid[row][col] = false; // ตั้งค่าสถานะเป็นไม่ถูกต้อง
    }
  }
  
  return false; // ไม่สามารถกรอกเลขได้
}

// ฟังก์ชันตรวจสอบเลขซ้ำในแถว
boolean checkRow(int row, int num) {
  for (int col = 0; col < 9; col++) {
    if (grid[row][col] == num) {
      return false; // พบเลขซ้ำ
    }
  }
  return true; // ไม่มีเลขซ้ำ
}

// ฟังก์ชันตรวจสอบเลขซ้ำในคอลัมน์
boolean checkCol(int col, int num) {
  for (int row = 0; row < 9; row++) {
    if (grid[row][col] == num) {
      return false; // พบเลขซ้ำ
    }
  }
  return true; // ไม่มีเลขซ้ำ
}

// ฟังก์ชันตรวจสอบเลขซ้ำในบล็อก 3x3
boolean checkSubGrid(int row, int col, int num) {
  int startRow = row - row % 3;
  int startCol = col - col % 3;

  for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
      if (grid[i + startRow][j + startCol] == num) {
        return false; // พบเลขซ้ำ
      }
    }
  }
  return true; // ไม่มีเลขซ้ำ
}

// ฟังก์ชันตรวจสอบความถูกต้องในการวางตัวเลข
boolean isValidMove(int row, int col, int num) {
  return checkRow(row, num) && checkCol(col, num) && checkSubGrid(row, col, num);
}

// ฟังก์ชันสำหรับจัดการคลิกเมาส์
void mousePressed() {
  float cellSize = width / 9; // ขนาดของช่อง
  if (screen.equals("menu")) {
    // ตรวจสอบว่าคลิกที่ปุ่ม Start, Load หรือ Exit
    if (startButton.isClicked(mouseX, mouseY)) {
      screen = "sudoku"; // เปลี่ยนหน้าจอเป็นซูโดกุ
    } else if (loadButton.isClicked(mouseX, mouseY)) {
      // ทำงานที่ต้องการเมื่อคลิก Load
    } else if (exitButton.isClicked(mouseX, mouseY)) {
      exit(); // ออกจากโปรแกรม
    }
  } else if (screen.equals("sudoku")) {
    // ตรวจสอบว่าคลิกในช่องซูโดกุหรือไม่
    selectedRow = int(mouseX / cellSize); // หาตำแหน่งแถว
    selectedCol = int(mouseY / cellSize); // หาตำแหน่งคอลัมน์
  }
}

// ฟังก์ชันสำหรับกดปุ่มและกรอกตัวเลข
void keyPressed() {
  if (screen.equals("sudoku") && selectedRow != -1 && selectedCol != -1) {
    if (key >= '1' && key <= '9') {
      int numberToPlace = key - '0'; // แปลงค่าตัวเลขจาก key เป็น int

      // ตรวจสอบความถูกต้องในการวางตัวเลข
      if (isValidMove(selectedRow, selectedCol, numberToPlace)) {
        grid[selectedRow][selectedCol] = numberToPlace; // วางตัวเลข
        isValid[selectedRow][selectedCol] = true; // ตัวเลขถูกต้อง
      } else {
        println("Invalid move"); // แสดงข้อความเมื่อมีการวางเลขไม่ถูกต้อง
        grid[selectedRow][selectedCol] = numberToPlace; // วางตัวเลขไม่ถูกต้อง
        isValid[selectedRow][selectedCol] = false; // ตัวเลขไม่ถูกต้อง
      }
    } else if (key == BACKSPACE) {
      // กด Backspace เพื่อลบตัวเลขในช่องที่เลือก
      grid[selectedRow][selectedCol] = 0;
      isValid[selectedRow][selectedCol] = true; // ลบเลขแล้วทำให้สถานะถูกต้อง
    }
  }
}

// คลาสสำหรับปุ่ม
class PButton {
  String label;
  float x, y, w, h;
  color btnColor; // ตัวแปรสีปุ่ม

  // ตัวสร้างคลาสที่รับค่า label, ตำแหน่ง, ขนาด, และสีของปุ่ม
  PButton(String label, float x, float y, float w, float h, color btnColor) {
    this.label = label;
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.btnColor = btnColor;
  }

  void display() {
    fill(btnColor); // ใช้สีของปุ่มที่กำหนด
    rect(x, y, w, h);
    fill(255); // กำหนดสีตัวหนังสือเป็นสีขาว
    textAlign(CENTER, CENTER);
    text(label, x + w / 2, y + h / 2);
  }

  // ตรวจสอบว่าพิกัดเมาส์ (mx, my) อยู่ภายในปุ่มหรือไม่
  boolean isClicked(float mx, float my) {
    return (mx > x && mx < x + w && my > y && my < y + h);
  }
}

// ฟังก์ชันสำหรับสุ่มตัวเลขในตารางซูโดกุ
void shuffleGrid() {
  // เริ่มต้นกริดเป็นศูนย์
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      grid[i][j] = 0; // ล้างค่าในกริด
      isValid[i][j] = false; // ตั้งค่าสถานะเป็นไม่ถูกต้อง
    }
  }

  // กรอกตัวเลขสุ่มในตาราง
  fillNumbers(0, 0); // เรียกฟังก์ชันกรอกตัวเลขจากแถว 0 คอลัมน์ 0

  // ลบหมายเลขบางช่องเพื่อนำไปใช้เป็นปริศนาซูโดกุ
  removeNumbers();
}

// ฟังก์ชันสำหรับลบหมายเลขบางช่องในกริดเพื่อทำให้เป็นปริศนา
void removeNumbers() {
  int count = 0; // นับจำนวนหมายเลขที่ถูกลบ
  while (count < 40) { // ลบ 40 หมายเลข (หรือปรับได้ตามต้องการ)
    int i = int(random(9));
    int j = int(random(9));
    if (grid[i][j] != 0) { // ตรวจสอบว่าช่องนี้มีตัวเลขหรือไม่
      grid[i][j] = 0; // ลบตัวเลข
      count++;
    }
  }
}
