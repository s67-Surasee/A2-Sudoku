import java.util.ArrayList;
import java.util.Collections;

// ตัวแปรสำหรับปุ่ม
PButton startButton, loadButton, exitButton, rightExitButton, solveButton;

// สถานะของหน้าจอปัจจุบัน
String screen = "menu"; // เริ่มต้นที่หน้าจอเมนู

// ตารางซูโดกุขนาด 9x9
int[][] grid = new int[9][9]; // เก็บตัวเลขในแต่ละช่อง
int[][] originalGrid = new int[9][9]; // เก็บตัวเลขที่ถูกสร้างขึ้นเพื่อใช้ในการเฉลย
boolean[][] isValid = new boolean[9][9]; // เก็บสถานะความถูกต้องของแต่ละช่อง
int selectedRow = -1, selectedCol = -1; // ตำแหน่งช่องที่ถูกเลือก
boolean isWon = false;

void setup() {
  size(600, 450); // ขยายขนาดหน้าต่างเป็น 600x450 พิกเซล (ขยายด้านข้าง)
  background(255); // ตั้งค่าสีพื้นหลังเป็นสีขาว
  
  // สร้างปุ่ม Start, Load, Exit โดยกำหนดสีเข้มขึ้น
  startButton = new PButton("Start", 225, 150, 150, 50, color(178, 113, 0));    // สีเขียวเข้ม
  loadButton = new PButton("Load", 225, 220, 150, 50, color(178, 113, 0));      // สีน้ำเงินเข้ม
  exitButton = new PButton("Exit", 225, 290, 150, 50, color(178, 113, 0));      // สีแดงเข้ม
  
  solveButton = new PButton("Reveal", 470, 50, 100, 50, color(178, 113, 0));
  rightExitButton = new PButton("Exit", 470, 120, 100, 50, color(178, 113, 0)); // ปุ่มออกทางด้านขวาของหน้าจอ
  
  // เริ่มกรอกตัวเลขสุ่มในตาราง
  generateUniqueSudokuGrid(); // เรียกใช้ฟังก์ชันเพื่อสร้างกริดที่ไม่ซ้ำกัน
}

void draw() {
  // ตรวจสอบสถานะของหน้าจอ
  if (screen.equals("menu")) {
    // แสดงเมนู
    background(255); // ล้างหน้าจอด้วยสีขาว
    startButton.display();
    loadButton.display();
    exitButton.display();
  } else if (screen.equals("sudoku")) {
    // แสดงหน้าจอซูโดกุ
    background(255); // ล้างหน้าจอด้วยสีขาว
    drawSudokuGrid();
    
    rightExitButton.display();
    solveButton.display();
    // ตรวจสอบว่าชนะหรือไม่
    if (isWon) {
      fill(0); // กำหนดสีข้อความเป็นสีดำ
      textAlign(CENTER, CENTER);
      textSize(32);
      text("YOU WIN!", width / 2, height / 2); // แสดงข้อความว่าชนะ
    }
  }
}

void generateUniqueSudokuGrid() {
  fillNumbers(0, 0); // เริ่มต้นกรอกตัวเลขจากแถว 0 คอลัมน์ 0
  copyGrid(); // คัดลอกตัวเลขที่ถูกกรอกไปยัง originalGrid
  removeNumbers(); // ลบหมายเลขบางตัวเพื่อทำให้เป็นปริศนา
}

// ฟังก์ชันวาดตารางซูโดกุโดยใช้สี่เหลี่ยม
void drawSudokuGrid() {
  int gridSize = 9;      // ซูโดกุเป็นตารางขนาด 9x9
  float cellSize = 400 / gridSize;  // ขนาดของช่องแต่ละช่อง (จำกัดอยู่ในพื้นที่ 400 พิกเซล)

  for (int i = 0; i < gridSize; i++) {
    for (int j = 0; j < gridSize; j++) {
      // แสดงสีของช่องที่ถูกเลือก
      if (i == selectedRow && j == selectedCol) {
        fill(255, 100, 100); // ช่องที่ถูกเลือกจะเป็นสีแดงอ่อน
      } else {
        fill(255); // ช่องปกติเป็นสีขาว
      }

      // วาดช่องสี่เหลี่ยมของตาราง
      noStroke(); // ปิดเส้นขอบเพื่อให้วาดช่องสี่เหลี่ยมก่อน
      rect(i * cellSize, j * cellSize, cellSize, cellSize);

      // วาดเส้นขอบของตารางแบบบาง
      stroke(0); // เส้นขอบสีดำ
      strokeWeight(1); // เส้นบางปกติ
      noFill();
      rect(i * cellSize, j * cellSize, cellSize, cellSize);
    }
  }

  // วาดเส้นขอบหนาของบล็อก 3x3
  stroke(0); // เส้นขอบสีดำ
  strokeWeight(3); // เส้นขอบหนา
  for (int i = 0; i <= gridSize; i++) {
    if (i % 3 == 0) {
      // วาดเส้นขอบหนาทุก 3 ช่อง
      line(i * cellSize, 0, i * cellSize, 400); // เส้นแนวตั้ง
      line(0, i * cellSize, 400, i * cellSize);  // เส้นแนวนอน
    }
  }

  // วาดตัวเลขในช่อง
  for (int i = 0; i < gridSize; i++) {
    for (int j = 0; j < gridSize; j++) {
      if (grid[i][j] > 0) {
        // ตรวจสอบว่าตัวเลขในช่องนั้นถูกต้องหรือไม่
        if (isValid[i][j]) {
          fill(0); // สีของตัวเลขที่ถูกต้องเป็นสีดำ
        } else {
          fill(255, 0, 0); // สีของตัวเลขที่ไม่ถูกต้องเป็นสีแดง
        }
        textAlign(CENTER, CENTER);
        textSize(24);
        text(grid[i][j], i * cellSize + cellSize / 2, j * cellSize + cellSize / 2);
      }
    }
  }
}

// ฟังก์ชันคัดลอกหมายเลขในตารางไปยัง originalGrid
void copyGrid() {
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      originalGrid[i][j] = grid[i][j]; // คัดลอกเลขจาก grid ไปยัง originalGrid
    }
  }
}

// ฟังก์ชันกรอกตัวเลขสุ่มในตาราง โดยไม่ให้เลขในแถว, คอลัมน์, และบล็อก 3x3 ซ้ำกัน
void fillGrid() {
  fillNumbers(0, 0); // เริ่มต้นกรอกตัวเลขจากแถว 0 คอลัมน์ 0
}

// ฟังก์ชันกรอกตัวเลขในตารางซูโดกุ
boolean fillNumbers(int row, int col) {
  if (row == 9) { // ถ้าเต็มตารางแล้ว
    return true; // เสร็จสมบูรณ์
  }

  // ถัดไปในคอลัมน์
  int nextRow = (col == 8) ? row + 1 : row;
  int nextCol = (col + 1) % 9;

  // สุ่มตัวเลขจาก 1 ถึง 9
  ArrayList<Integer> numbers = new ArrayList<Integer>();
  for (int num = 1; num <= 9; num++) {
    numbers.add(num);
  }
  Collections.shuffle(numbers); // สุ่มหมายเลข

  // ลองกรอกเลขในลำดับที่สุ่ม
  for (int num : numbers) {
    if (isValidMove(row, col, num)) {
      grid[row][col] = num; // กรอกตัวเลข
      isValid[row][col] = true; // ตั้งค่าสถานะเป็นถูกต้อง

      // เรียกใช้ฟังก์ชันนี้ซ้ำเพื่อกรอกเลขถัดไป
      if (fillNumbers(nextRow, nextCol)) {
        return true; // ถ้ากรอกเลขถัดไปสำเร็จ
      }

      // ถ้ากรอกเลขถัดไปไม่สำเร็จ ให้ลบเลขนี้ออกและลองเลขถัดไป
      grid[row][col] = 0; // ลบเลข
      isValid[row][col] = false; // ตั้งค่าสถานะเป็นไม่ถูกต้อง
    }
  }
  
  return false; // ถ้าทั้งหมดไม่สำเร็จ
}

// ฟังก์ชันตรวจสอบความถูกต้องในการกรอกตัวเลข
boolean isValidMove(int row, int col, int num) {
  for (int i = 0; i < 9; i++) {
    if (grid[row][i] == num || grid[i][col] == num || grid[row / 3 * 3 + i / 3][col / 3 * 3 + i % 3] == num) {
      return false; // ถ้ามีเลขซ้ำให้คืนค่า false
    }
  }
  return true; // ถ้าไม่มีเลขซ้ำให้คืนค่า true
}

// ฟังก์ชันลบหมายเลขบางตัวออกจากกริด
void removeNumbers() {
  int removeCount = 40; // จำนวนเลขที่ต้องลบ

  while (removeCount > 0) {
    int row = (int) random(0, 9); // เลือกแถวแบบสุ่ม
    int col = (int) random(0, 9); // เลือกคอลัมน์แบบสุ่ม
    if (grid[row][col] != 0) {
      grid[row][col] = 0; // ลบหมายเลข
      removeCount--;
    }
  }
}

// ฟังก์ชันตรวจสอบการคลิกปุ่ม
void mousePressed() {
  if (screen.equals("menu")) {
    if (startButton.isMouseOver()) {
      screen = "sudoku"; // เปลี่ยนไปยังหน้าจอซูโดกุเมื่อกดปุ่ม Start
    } else if (loadButton.isMouseOver()) {
      loadGame();
      screen = "play";
      // เพิ่มฟังก์ชันการโหลดเกมในอนาคต
    } else if (exitButton.isMouseOver()) {
      exit(); // ออกจากโปรแกรม
    }
  } else if (screen.equals("sudoku")) {
    // ตรวจสอบว่าผู้ใช้กดช่องไหนในตาราง
    int gridSize = 9; // ขนาดตาราง 9x9
    float cellSize = 400 / gridSize; // ขนาดของช่อง
    for (int i = 0; i < gridSize; i++) {
      for (int j = 0; j < gridSize; j++) {
        if (mouseX > i * cellSize && mouseX < (i + 1) * cellSize && mouseY > j * cellSize && mouseY < (j + 1) * cellSize) {
          selectedRow = i; // ตั้งค่าตำแหน่งแถวที่ถูกเลือก
          selectedCol = j; // ตั้งค่าตำแหน่งคอลัมน์ที่ถูกเลือก
          break; // ออกจากลูป
        }
      }
    }

    // ตรวจสอบว่ากดปุ่ม Exit หรือ Reveal
    if (rightExitButton.isMouseOver()) {
      exit(); // กลับไปที่หน้าจอเมนู
    } else if (solveButton.isMouseOver()) {
      revealNumbers(); // เปิดเผยหมายเลขที่ถูกต้อง
    }
  }
}

// ฟังก์ชันสำหรับเปิดเผยหมายเลขที่ถูกต้องในตาราง
void revealNumbers() {
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      if (originalGrid[i][j] != 0) { // ตรวจสอบหมายเลขที่ไม่เป็นศูนย์ใน originalGrid
        grid[i][j] = originalGrid[i][j]; // กำหนดค่ากลับไปที่ grid
      }
    }
  }
}

void keyPressed() {
  if (screen.equals("sudoku") && selectedRow != -1 && selectedCol != -1) {
    if (key >= '1' && key <= '9') {
      int numberToPlace = key - '0'; // แปลงค่าตัวเลขจาก key เป็น int

      // ตรวจสอบความถูกต้องในการวางตัวเลข
      if (isValidMove(selectedRow, selectedCol, numberToPlace)) {
        grid[selectedRow][selectedCol] = numberToPlace; // วางตัวเลข
        isValid[selectedRow][selectedCol] = true; // ตัวเลขถูกต้อง
      } else {
        println("Invalid move"); // แสดงข้อความเมื่อมีการวางเลขไม่ถูกต้อง
        grid[selectedRow][selectedCol] = numberToPlace; // วางตัวเลขไม่ถูกต้อง
        isValid[selectedRow][selectedCol] = false; // ตัวเลขไม่ถูกต้อง
      }

      // ตรวจสอบการชนะ
      checkWin(); // ตรวจสอบว่าชนะหรือไม่
    } else if (key == BACKSPACE) {
      // กด Backspace เพื่อลบตัวเลขในช่องที่เลือก
      grid[selectedRow][selectedCol] = 0;
      isValid[selectedRow][selectedCol] = false; // ตั้งค่าสถานะเป็นไม่ถูกต้อง
    } else if (key == 'l' || key == 'L') {
      // กดปุ่ม 'l' หรือ 'L' เพื่อโหลดเกม
      loadGame(); // เรียกใช้ฟังก์ชัน loadGame() เพื่อโหลดเกม
    }
  }
}

void checkWin() {
  isWon = true; // ตั้งค่าสถานะชนะเป็น true
  for (int i = 0; i < 9; i++) {
    for (int j = 0; j < 9; j++) {
      // ตรวจสอบว่าช่องนั้นถูกกรอกหรือไม่และเป็นเลขที่ถูกต้อง
      if (grid[i][j] == 0 || !isValid[i][j]) {
        isWon = false; // ถ้ามีช่องที่ว่างหรือตัวเลขไม่ถูกต้อง ตั้งค่าสถานะชนะเป็น false
        return; // ออกจากฟังก์ชัน
      }
    }
  }
}


// คลาสสำหรับปุ่ม
class PButton {
  String label;
  float x, y, w, h;
  color c;

  PButton(String label, float x, float y, float w, float h, color c) {
    this.label = label;
    this.x = x;
    this.y = y;
    this.w = w;
    this.h = h;
    this.c = c;
  }

  void display() {
    fill(c); // กำหนดสีพื้นหลังปุ่ม
    rect(x, y, w, h, 10); // วาดปุ่ม

    fill(255); // กำหนดสีข้อความเป็นสีขาว
    textAlign(CENTER, CENTER);
    textSize(24);
    text(label, x + w / 2, y + h / 2); // แสดงข้อความบนปุ่ม
  }

  boolean isMouseOver() {
    return mouseX > x && mouseX < x + w && mouseY > y && mouseY < y + h; // ตรวจสอบการคลิกปุ่ม
  }
}

void saveGame() {
  selectOutput("Select a location to save:", "savetoFile");
}

// ฟังก์ชัน callback ที่ทำงานเมื่อเลือกไฟล์
void savetoFile(File selection) {
  if (selection == null) {
    println("No file was selected"); // หากผู้ใช้ไม่ได้เลือกไฟล์
  } else {
    String[] lines = new String[9]; // สร้าง array เพื่อเก็บข้อมูล 9 แถว

    int i = 0;
    while (i < 9) {
      String[] row = new String[9];
      int j = 0;
      while (j < 9) {
        row[j] = str(grid[i][j]); // แปลงตัวเลขในกริดเป็นข้อความ
        j++;
      }
      lines[i] = join(row, ','); // รวมข้อความในแต่ละแถวและคั่นด้วยจุลภาค
      i++;
    }

    // บันทึกไฟล์โดยใช้ตำแหน่งที่เลือก
    saveStrings(selection.getAbsolutePath(), lines);
    println("Game Saved"); // แสดงข้อความเมื่อบันทึกสำเร็จ
  }
}

void loadGame() {
  selectInput("Select a file to load:", "loadFromFile");
}

void loadFromFile(File selection) {
  if (selection == null) {
    println("No file was selected");  // กรณีไม่ได้เลือกไฟล์
  } else {
    String[] loadedData = loadStrings(selection.getAbsolutePath());  // โหลดข้อมูลจากไฟล์
    if (loadedData != null && loadedData.length == 9) {
      int i = 0;
      while (i < 9) {
        String[] row = split(loadedData[i], ',');  // แยกข้อมูลด้วยเครื่องหมายจุลภาค
        int j = 0;
        while (j < 9) {
          grid[i][j] = int(row[j]);  // แปลงข้อมูลเป็น int และเก็บในตารางเกม
          j++;
        }
        i++;
      }
      println("Game Loaded");  // แสดงข้อความว่าเกมถูกโหลดแล้ว
      screen = "sudoku";  // เปลี่ยนหน้าจอเป็นหน้า Sudoku หลังจากโหลดเสร็จ
    } else {
      println("Error loading game. File may be corrupted or missing.");
    }
  }
}
